0
00:00:00,000 --> 00:00:01,899
现在我们再去看一下多态

1
00:00:01,899 --> 00:00:07,059
多态是面向对象程序设计形象当中非常重要的一个特征

2
00:00:07,059 --> 00:00:09,000
那什么叫做多态呢

3
00:00:09,000 --> 00:00:12,019
它实际上指的就是多种形态

4
00:00:12,019 --> 00:00:17,519
即便你不知道一个变量所引用的对象到底是什么数据类型

5
00:00:17,519 --> 00:00:21,559
那么依然可以通过这个变量去调用这个对象的方法

6
00:00:21,559 --> 00:00:23,699
在程序运行过程当中

7
00:00:23,699 --> 00:00:27,339
它会根据变量所引用对象的数据类型

8
00:00:27,339 --> 00:00:30,699
动态的决定调用哪个对象的方法

9
00:00:30,699 --> 00:00:33,420
也就是说你在编写方法的时候

10
00:00:33,420 --> 00:00:36,520
你的这个参数类型你不知道

11
00:00:36,520 --> 00:00:37,859
本来我们也不知道

12
00:00:37,859 --> 00:00:39,759
只有在调用的时候

13
00:00:39,759 --> 00:00:41,719
传入具体的参数

14
00:00:41,719 --> 00:00:43,259
你才能够知道是谁

15
00:00:43,259 --> 00:00:46,299
但是现在我们这个参数可以很确定告诉你

16
00:00:46,299 --> 00:00:47,560
它是一个对象

17
00:00:47,560 --> 00:00:50,799
那么你可以去调这个对象的方法

18
00:00:50,799 --> 00:00:53,439
只要这个对象有这个方法就可以了

19
00:00:53,439 --> 00:00:56,340
所以说Python语言当中的多态

20
00:00:56,340 --> 00:00:59,359
它不关心对象的数据类型

21
00:00:59,359 --> 00:01:04,239
它也不关心你是否存在这样的一个继承关系

22
00:01:04,239 --> 00:01:08,099
它只关心你是否具有同名的方法

23
00:01:08,099 --> 00:01:10,019
只要具有同名的方法

24
00:01:10,019 --> 00:01:11,340
就可以实现多态

25
00:01:11,340 --> 00:01:15,519
这个也是Python语言和其他语言当中所不一样的地方

26
00:01:15,519 --> 00:01:17,319
在加盘语言当中

27
00:01:17,319 --> 00:01:21,319
你封装继承多态是必不可少的

28
00:01:21,319 --> 00:01:22,620
你要想实现多态

29
00:01:22,620 --> 00:01:24,840
必须得有继承去做前提

30
00:01:24,840 --> 00:01:27,439
但是在咱们的Python语言当中就不一样

31
00:01:27,439 --> 00:01:28,459
你呢

32
00:01:28,459 --> 00:01:30,200
只关心行为

33
00:01:30,200 --> 00:01:31,500
只关心方法

34
00:01:31,500 --> 00:01:34,980
我不关心你是否具有这样的继承关系

35
00:01:34,980 --> 00:01:36,019
所以现在呢

36
00:01:36,019 --> 00:01:38,620
我们就给大家演示一下Python当中的多态

37
00:01:38,620 --> 00:01:41,319
记住了只关心方法

38
00:01:41,319 --> 00:01:42,480
那么现在呢

39
00:01:42,480 --> 00:01:45,099
我们在这的时候去新建一个Python文件

40
00:01:45,099 --> 00:01:47,599
叫做势力9-13

41
00:01:47,599 --> 00:01:49,659
Python当中的一个多态

42
00:01:49,659 --> 00:01:50,819
记住了

43
00:01:50,819 --> 00:01:52,579
他只关心对象的行为

44
00:01:52,579 --> 00:01:54,719
所以我在这边写三个类

45
00:01:54,719 --> 00:02:07,444
 person person

46
00:02:07,444 --> 00:02:08,965
那然后我直接写上

47
00:02:08,965 --> 00:02:10,745
人吃五谷杂粮

48
00:02:10,745 --> 00:02:14,185
简单模拟五谷杂粮

49
00:02:14,185 --> 00:02:15,764
那这是我的一个类

50
00:02:15,764 --> 00:02:16,685
那有同学老师

51
00:02:16,685 --> 00:02:17,985
你没有写初始化方法

52
00:02:17,985 --> 00:02:18,544
没有关系

53
00:02:18,544 --> 00:02:20,025
初始化方法是

54
00:02:20,025 --> 00:02:22,405
你有实力属性的时候

55
00:02:22,405 --> 00:02:24,025
在初始化方法当中复制

56
00:02:24,025 --> 00:02:26,525
如果你没有这个实力属性

57
00:02:26,525 --> 00:02:28,104
你可以不写初出发方法

58
00:02:28,104 --> 00:02:29,685
那这是我的第一个类

59
00:02:29,685 --> 00:02:31,224
然后紧接着呢

60
00:02:31,224 --> 00:02:32,465
我加这我又写了一个类

61
00:02:32,465 --> 00:02:34,125
这个类啊叫cat

62
00:02:34,125 --> 00:02:35,004
cat是什么

63
00:02:35,004 --> 00:02:35,425
猫

64
00:02:35,425 --> 00:02:36,824
那么我们说

65
00:02:36,824 --> 00:02:39,784
从整个这个类的结构编写当中

66
00:02:39,784 --> 00:02:41,405
你的person类和cat类

67
00:02:41,405 --> 00:02:43,104
它们之间存在继承关系吗

68
00:02:43,104 --> 00:02:43,985
不存在

69
00:02:43,985 --> 00:02:46,125
它们之间是并列的类

70
00:02:46,125 --> 00:02:47,224
不存在继承关系

71
00:02:47,224 --> 00:02:48,664
但是这个猫啊

72
00:02:48,664 --> 00:02:50,644
它也有一个吃的方法

73
00:02:50,644 --> 00:02:51,604
那么我们知道

74
00:02:51,604 --> 00:02:53,064
这个小猫吃什么呢

75
00:02:53,064 --> 00:02:55,584
这个猫它是喜欢吃鱼的

76
00:02:55,584 --> 00:02:57,305
那这个类我写完了

77
00:02:57,305 --> 00:02:58,444
两个类了

78
00:02:58,444 --> 00:03:00,084
我再去编写一个类

79
00:03:00,084 --> 00:03:01,385
class dog

80
00:03:01,385 --> 00:03:03,205
小狗这个类

81
00:03:03,205 --> 00:03:04,844
小狗这个类呢

82
00:03:04,844 --> 00:03:07,344
它也有一个方法叫做eat

83
00:03:07,344 --> 00:03:08,644
然后在这个时候

84
00:03:08,644 --> 00:03:10,504
我们说狗喜欢啃骨头

85
00:03:10,504 --> 00:03:11,625
现在来看一下

86
00:03:11,625 --> 00:03:13,264
我的这三个类的类结构

87
00:03:13,264 --> 00:03:15,485
从整个类的关系当中

88
00:03:15,485 --> 00:03:17,305
可以看出来person类互相独立

89
00:03:17,305 --> 00:03:18,485
cat类独立

90
00:03:18,485 --> 00:03:19,465
dog类独立

91
00:03:19,465 --> 00:03:21,604
它们之间没有任何的继承关系

92
00:03:21,604 --> 00:03:22,965
但是这三个类

93
00:03:22,965 --> 00:03:24,364
都有一个共同的缩点

94
00:03:24,364 --> 00:03:26,025
这三个类当中

95
00:03:26,025 --> 00:03:29,604
都有一个同名的方法

96
00:03:29,604 --> 00:03:31,165
这个方法叫EAT

97
00:03:31,165 --> 00:03:32,885
也就是说你Person类当中

98
00:03:32,885 --> 00:03:33,604
有EAT方法

99
00:03:33,604 --> 00:03:35,144
Type类当中有EAT方法

100
00:03:35,144 --> 00:03:36,724
Direct类当中还有一些方法

101
00:03:36,724 --> 00:03:38,465
这叫同名方法

102
00:03:38,465 --> 00:03:39,644
然后紧接着

103
00:03:39,644 --> 00:03:42,125
我在这儿去编写一个函数

104
00:03:42,125 --> 00:03:44,525
为什么说它叫函数了呢

105
00:03:44,525 --> 00:03:47,385
因为它没有去写在我们的类当中

106
00:03:47,385 --> 00:03:49,364
是直接在我们Python文件当中

107
00:03:49,364 --> 00:03:50,805
写在定格去写的

108
00:03:50,805 --> 00:03:52,564
DEF FUN

109
00:03:52,564 --> 00:03:54,264
FUN是我方法的名字

110
00:03:54,264 --> 00:03:57,185
然后紧接着我在这传了一个参数

111
00:03:57,185 --> 00:04:10,810


112
00:04:10,810 --> 00:04:11,530
不知道

113
00:04:11,530 --> 00:04:15,449
我根本不知道这个形参的数据类型

114
00:04:15,449 --> 00:04:21,069
但是我依然可以通过这个变量去调用对象的方法

115
00:04:21,069 --> 00:04:22,790
什么叫调对象方法

116
00:04:22,790 --> 00:04:25,910
我知道有一个it方法

117
00:04:25,910 --> 00:04:28,889
所以我直接去通过变量

118
00:04:28,889 --> 00:04:30,769
OB高

119
00:04:30,769 --> 00:04:32,689
这个OB高你也称作什么对象

120
00:04:32,689 --> 00:04:35,129
我不知道它是什么数据类型

121
00:04:35,129 --> 00:04:39,910
但是我依然可以通过这个变量或者这个对象调用e的方法

122
00:04:39,910 --> 00:04:43,709
也就是说你现在在程序还没有运行呢

123
00:04:43,709 --> 00:04:46,829
你知道吃的是五谷甲粮

124
00:04:46,829 --> 00:04:48,790
鱼还是骨头吗

125
00:04:48,790 --> 00:04:49,389
不知道

126
00:04:49,389 --> 00:04:52,410
什么时候才能知道呢

127
00:04:52,410 --> 00:04:54,430
程序运行的时候

128
00:04:54,430 --> 00:04:58,389
那么我现在开始去创建三个类的对象

129
00:04:58,389 --> 00:05:00,870
这三个类分别是我的person类

130
00:05:00,870 --> 00:05:01,850
我给它叫pr

131
00:05:01,850 --> 00:05:03,449
创建一个person类对象

132
00:05:03,449 --> 00:05:05,910
它没有定义出鼠话方法

133
00:05:05,910 --> 00:05:07,089
所以没有传参

134
00:05:07,089 --> 00:05:08,310
直接小括号就行

135
00:05:08,310 --> 00:05:10,769
这个小括号是不能省略的

136
00:05:10,769 --> 00:05:12,189
然后紧接着cat

137
00:05:12,189 --> 00:05:15,149
cat去创建了cat类的对象

138
00:05:15,149 --> 00:05:18,050
dog去创建了dog类对象

139
00:05:18,050 --> 00:05:20,209
现在我有person类的对象

140
00:05:20,209 --> 00:05:21,370
dog类对象

141
00:05:21,370 --> 00:05:22,410
以及cat类对象

142
00:05:22,410 --> 00:05:24,750
然后紧接着这个时候

143
00:05:24,750 --> 00:05:27,029
你可以去叫fun函数

144
00:05:27,029 --> 00:05:29,769
fun我传入了一个pr

145
00:05:29,769 --> 00:05:32,029
fun我传入了一个cat

146
00:05:32,029 --> 00:05:35,110
fun我又传入了一个dog

147
00:05:35,110 --> 00:05:37,910
现在我问你程序运行了吗

148
00:05:37,910 --> 00:05:38,449
没有

149
00:05:38,449 --> 00:05:39,810
那现在呢

150
00:05:39,810 --> 00:05:40,550
我告诉你

151
00:05:40,550 --> 00:05:43,009
这就已经构成了多态了

152
00:05:43,009 --> 00:05:45,470
那这就是python当中的多态

153
00:05:45,470 --> 00:05:46,870
它指的什么

154
00:05:46,870 --> 00:05:49,789
不关心你的对象

155
00:05:49,789 --> 00:05:51,449
是否具有进入关系

156
00:05:51,449 --> 00:05:55,490
或者说不关心你的对象的数据类型

157
00:05:55,490 --> 00:05:56,769
但是呢

158
00:05:56,769 --> 00:06:10,634


159
00:06:10,634 --> 00:06:11,675
猫喜欢吃鱼

160
00:06:11,675 --> 00:06:12,794
狗喜欢吃骨头

161
00:06:12,794 --> 00:06:13,514
那现在呢

162
00:06:13,514 --> 00:06:15,354
我去给你进行代码调色

163
00:06:15,354 --> 00:06:18,115
我在这去打了三个端点

164
00:06:18,115 --> 00:06:21,514
然后紧接着点击小虫子开心调色

165
00:06:21,514 --> 00:06:23,754
那么我选择step into my code

166
00:06:23,754 --> 00:06:25,115
进入我自己的代码

167
00:06:25,115 --> 00:06:25,875
你去看啊

168
00:06:25,875 --> 00:06:28,794
它是不是去到这FUN这方法这来了

169
00:06:28,794 --> 00:06:29,694
叫函数这来了

170
00:06:29,694 --> 00:06:32,115
然后紧接你去看一下这OBGOL类型

171
00:06:32,115 --> 00:06:33,394
这块一定要记住了

172
00:06:33,394 --> 00:06:35,474
看一下OBGOL的数据类型

173
00:06:35,474 --> 00:06:36,495
它后面给你写的什么

174
00:06:36,495 --> 00:06:37,194
叫Person

175
00:06:37,194 --> 00:06:38,954
所以我们知道它是Person类型

176
00:06:38,954 --> 00:06:42,074
那然后紧接着你的OBGOL

177
00:06:42,074 --> 00:06:43,214
它是Person类型

178
00:06:43,214 --> 00:06:45,414
当它去调用IT方法的时候

179
00:06:45,414 --> 00:06:48,274
你发现它调的是Person类的IT方法

180
00:06:48,274 --> 00:06:49,294
打印输出了

181
00:06:49,294 --> 00:06:53,074
然后紧接着我在这再去进入我的代码

182
00:06:53,074 --> 00:06:55,735
你发现它是不是又到FUN这来了

183
00:06:55,735 --> 00:06:58,334
看一下这是第二次调用

184
00:06:58,334 --> 00:06:59,495
第二次调用的时候

185
00:06:59,495 --> 00:07:00,394
OPGO的类型

186
00:07:00,394 --> 00:07:01,235
他告诉你是KIT

187
00:07:01,235 --> 00:07:02,834
程序运行的时候

188
00:07:02,834 --> 00:07:04,914
才能够知道他具体的数据类型

189
00:07:04,914 --> 00:07:07,175
然后紧接着再去调用

190
00:07:07,175 --> 00:07:09,914
你发现他调用是KIT当中的EAT方法

191
00:07:09,914 --> 00:07:13,634
然后开始再继续点击

192
00:07:13,634 --> 00:07:17,754
发现他这个是OPGO的类型是DOG

193
00:07:17,754 --> 00:07:19,694
然后你去点击

194
00:07:19,694 --> 00:07:22,694
他进入是DOG类当中的EAT方法

195
00:07:22,694 --> 00:07:25,014
然后现在程序执行结束

196
00:07:25,014 --> 00:07:26,274
三句话转移输出

197
00:07:26,274 --> 00:07:29,794
那这个就是给大家讲的叫我们的多态

198
00:07:29,794 --> 00:07:34,314
那现在你知道为什么要实现多态了吗

199
00:07:34,314 --> 00:07:37,754
它可以在程序运行的过程当中

200
00:07:37,754 --> 00:07:42,014
动态的决定调用哪个对象当中的方法

201
00:07:42,014 --> 00:07:45,894
可以去实现咱们程序的可扩展性

202
00:07:45,894 --> 00:07:48,254
那么我们面向对象的三大特征

203
00:07:48,254 --> 00:07:53,094
封装的作用是开始去保护程序的安全

204
00:07:53,094 --> 00:07:55,495
然后紧接着继承的作用

205
00:07:55,495 --> 00:07:59,034
程序的一个方法的一个重写

206
00:07:59,034 --> 00:08:00,694
代码的一个附用

207
00:08:00,694 --> 00:08:01,834
然后多态

208
00:08:01,834 --> 00:08:04,574
它可以实现程序的可扩展性
